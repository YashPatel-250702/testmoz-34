generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mentor {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  mobile    String?  @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Test      Test[]
}

model Test {
  id                   String                   @id @default(cuid())
  name                 String?
  description          String?
  type                 TestType?
  status               TestStatus?
  duration             Int?
  noOfQuestions        Int?
  noOfAttempts         Int?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  mentorId             String
  publicLink           String?
  conceptsCovered      String[]
  technicalQuestions   TechnicalTestQuestions[]
  TechnicalTestResults TechnicalTestResults[]
  mentor               Mentor                   @relation(fields: [mentorId], references: [id],onDelete: Cascade)
  questions            TestQuestions[]
  attempts             TestResults[]
}

model TechnicalTestQuestions {
  id               String    @id @default(uuid())
  problemStatement String
  constraints      String?
  complexity       String?
  type             TestType?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  testId           String
  sampleInput      String[]
  sampleOutput     String[]
  test             Test      @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
}

model TestQuestions {
  id        String   @id @default(cuid())
  question  String?
  options   String[]
  answer    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  testId    String
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
}

model TechnicalTestResults {
  id                String           @id @default(cuid())
  userEmail         String
  userMobile        String?
  userName          String?
  question_ids      String[]
  answers           String[]
  test_cases_passed String[]
  createdAt         DateTime         @default(now())
  score             Int?
  status            TesResultStatus?
  updatedAt         DateTime         @updatedAt
  testId            String
  test              Test             @relation(fields: [testId], references: [id],onDelete: Cascade)

  @@map("TechnicalTestResults")
}

model TestResults {
  id           String           @id @default(cuid())
  userEmail    String
  userMobile   String?
  userName     String?
  score        Int?
  status       TesResultStatus?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  testId       String
  answers      String[]
  question_ids String[]
  isCorrect    String[]
  test         Test             @relation(fields: [testId], references: [id],onDelete: Cascade)
}

enum TestType {
  COLLEGE
  TECHNICAL
  APPTITUDE
}

enum TestStatus {
  ACTIVE
  INACTIVE
}

enum TestResultStatus {
  PASSED
  FAILED
}

enum TesResultStatus {
  PASSED
  FAILED
  IN_PROGRESS
}

model Form {
  id        String   @id @default(cuid()) 
  title     String
  fields    Json     
  createdAt DateTime @default(now())
  mentorId  String   
}

